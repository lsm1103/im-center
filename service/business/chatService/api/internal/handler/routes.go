// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	friend "im-center/service/business/chatService/api/internal/handler/friend"
	msg "im-center/service/business/chatService/api/internal/handler/msg"
	service "im-center/service/business/chatService/api/internal/handler/service"
	"im-center/service/business/chatService/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addFriend",
				Handler: friend.AddFriendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batchChangeFriendRelation",
				Handler: friend.BatchChangeFriendRelationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/friendGets",
				Handler: friend.FriendGetsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/friend/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/groupGet/:group_id",
				Handler: friend.GroupGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/groupGets",
				Handler: friend.GroupGetsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/groupAdd",
				Handler: friend.GroupAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/groupUpdate",
				Handler: friend.GroupUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/groupBatchDel",
				Handler: friend.GroupBatchDelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userAddGroup",
				Handler: friend.UserAddGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/userExitGroup",
				Handler: friend.UserExitGroupHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/group/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/sendOneMsg",
				Handler: msg.SendOneMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sendManyMsg",
				Handler: msg.SendManyMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ackMsg",
				Handler: msg.AckMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/syncMsg",
				Handler: msg.SyncMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdrawMsg",
				Handler: msg.WithdrawMsgHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batchDelMsg",
				Handler: msg.BatchDelMsgHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/msg/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/offConnect",
				Handler: service.OffConnectHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getOnlineUsers",
				Handler: service.GetUserConnectListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getConnectInfo",
				Handler: service.GetConnectInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getServerInfo",
				Handler: service.GetServerInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/service/v1"),
	)
}

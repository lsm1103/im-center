// Code generated by goctl. DO NOT EDIT!
// Source: chat.proto

package server

import (
	"context"

	"im-center/service/business/chatService/rpc/chat"
	"im-center/service/business/chatService/rpc/internal/logic"
	"im-center/service/business/chatService/rpc/internal/svc"
)

type ChatServer struct {
	svcCtx *svc.ServiceContext
	chat.UnimplementedChatServer
}

func NewChatServer(svcCtx *svc.ServiceContext) *ChatServer {
	return &ChatServer{
		svcCtx: svcCtx,
	}
}

func (s *ChatServer) AddFriend(ctx context.Context, in *chat.AddFriendReq) (*chat.NullResp, error) {
	l := logic.NewAddFriendLogic(ctx, s.svcCtx)
	return l.AddFriend(in)
}

func (s *ChatServer) BatchChangeFriendRelation(ctx context.Context, in *chat.BatchChangeFriendRelationReq) (*chat.NullResp, error) {
	l := logic.NewBatchChangeFriendRelationLogic(ctx, s.svcCtx)
	return l.BatchChangeFriendRelation(in)
}

func (s *ChatServer) FriendGets(ctx context.Context, in *chat.GetsReq) (*chat.FriendGetsResp, error) {
	l := logic.NewFriendGetsLogic(ctx, s.svcCtx)
	return l.FriendGets(in)
}

func (s *ChatServer) SendOneMsg(ctx context.Context, in *chat.SendOneMsgReq) (*chat.NullResp, error) {
	l := logic.NewSendOneMsgLogic(ctx, s.svcCtx)
	return l.SendOneMsg(in)
}

func (s *ChatServer) SendManyMsg(ctx context.Context, in *chat.SendManyMsgReq) (*chat.NullResp, error) {
	l := logic.NewSendManyMsgLogic(ctx, s.svcCtx)
	return l.SendManyMsg(in)
}

func (s *ChatServer) AckMsg(ctx context.Context, in *chat.AckMsgReq) (*chat.NullResp, error) {
	l := logic.NewAckMsgLogic(ctx, s.svcCtx)
	return l.AckMsg(in)
}

func (s *ChatServer) SyncMsg(ctx context.Context, in *chat.SyncMsgReq) (*chat.SyncMsgResp, error) {
	l := logic.NewSyncMsgLogic(ctx, s.svcCtx)
	return l.SyncMsg(in)
}

func (s *ChatServer) WithdrawMsg(ctx context.Context, in *chat.WithdrawMsgReq) (*chat.NullResp, error) {
	l := logic.NewWithdrawMsgLogic(ctx, s.svcCtx)
	return l.WithdrawMsg(in)
}

func (s *ChatServer) BatchDelMsg(ctx context.Context, in *chat.BatchDelMsgReq) (*chat.NullResp, error) {
	l := logic.NewBatchDelMsgLogic(ctx, s.svcCtx)
	return l.BatchDelMsg(in)
}

//  --------------------------------------------------------------------------------------------------------
func (s *ChatServer) GroupGet(ctx context.Context, in *chat.GroupGetReq) (*chat.GroupItem, error) {
	l := logic.NewGroupGetLogic(ctx, s.svcCtx)
	return l.GroupGet(in)
}

func (s *ChatServer) GroupGets(ctx context.Context, in *chat.GetsReq) (*chat.GroupGetsResp, error) {
	l := logic.NewGroupGetsLogic(ctx, s.svcCtx)
	return l.GroupGets(in)
}

func (s *ChatServer) GroupAdd(ctx context.Context, in *chat.GroupAddReq) (*chat.NullResp, error) {
	l := logic.NewGroupAddLogic(ctx, s.svcCtx)
	return l.GroupAdd(in)
}

func (s *ChatServer) GroupUpdate(ctx context.Context, in *chat.GroupUpdateReq) (*chat.NullResp, error) {
	l := logic.NewGroupUpdateLogic(ctx, s.svcCtx)
	return l.GroupUpdate(in)
}

func (s *ChatServer) GroupBatchDel(ctx context.Context, in *chat.GroupBatchDelReq) (*chat.NullResp, error) {
	l := logic.NewGroupBatchDelLogic(ctx, s.svcCtx)
	return l.GroupBatchDel(in)
}

//  用户群组关系
func (s *ChatServer) UserAddGroup(ctx context.Context, in *chat.UserAddGroupReq) (*chat.NullResp, error) {
	l := logic.NewUserAddGroupLogic(ctx, s.svcCtx)
	return l.UserAddGroup(in)
}

func (s *ChatServer) UserExitGroup(ctx context.Context, in *chat.UserExitGroupReq) (*chat.NullResp, error) {
	l := logic.NewUserExitGroupLogic(ctx, s.svcCtx)
	return l.UserExitGroup(in)
}

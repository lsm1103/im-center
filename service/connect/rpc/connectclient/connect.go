// Code generated by goctl. DO NOT EDIT!
// Source: conn.proto

package connectclient

import (
	"context"

	"im-center/service/connect/rpc/connect"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	At                    = connect.At
	BusinessInfo          = connect.BusinessInfo
	ConnectInfo           = connect.ConnectInfo
	GetConnectInfoReq     = connect.GetConnectInfoReq
	GetUserConnectListReq = connect.GetUserConnectListReq
	GetsQueryItem         = connect.GetsQueryItem
	GetsReq               = connect.GetsReq
	NullReq               = connect.NullReq
	NullResp              = connect.NullResp
	OffConnectReq         = connect.OffConnectReq
	SendManyMsgReq        = connect.SendManyMsgReq
	SendOneMsgReq         = connect.SendOneMsgReq
	Server                = connect.Server
	ServerInfo            = connect.ServerInfo
	ServerInfoReq         = connect.ServerInfoReq
	ServerInfoResp        = connect.ServerInfoResp
	SysInfo               = connect.SysInfo
	UserConnectListResp   = connect.UserConnectListResp

	Connect interface {
		//   rpc getConnectList(GetConnectListReq) returns(NullResp); // 获取连接列表
		GetConnectInfo(ctx context.Context, in *GetConnectInfoReq, opts ...grpc.CallOption) (*ConnectInfo, error)
		OffConnect(ctx context.Context, in *OffConnectReq, opts ...grpc.CallOption) (*NullResp, error)
		GetUserConnectList(ctx context.Context, in *GetUserConnectListReq, opts ...grpc.CallOption) (*UserConnectListResp, error)
		SendOneMsg(ctx context.Context, in *SendOneMsgReq, opts ...grpc.CallOption) (*NullResp, error)
		SendManyMsg(ctx context.Context, in *SendManyMsgReq, opts ...grpc.CallOption) (*NullResp, error)
		GetServerInfo(ctx context.Context, in *ServerInfoReq, opts ...grpc.CallOption) (*ServerInfoResp, error)
	}

	defaultConnect struct {
		cli zrpc.Client
	}
)

func NewConnect(cli zrpc.Client) Connect {
	return &defaultConnect{
		cli: cli,
	}
}

//   rpc getConnectList(GetConnectListReq) returns(NullResp); // 获取连接列表
func (m *defaultConnect) GetConnectInfo(ctx context.Context, in *GetConnectInfoReq, opts ...grpc.CallOption) (*ConnectInfo, error) {
	client := connect.NewConnectClient(m.cli.Conn())
	return client.GetConnectInfo(ctx, in, opts...)
}

func (m *defaultConnect) OffConnect(ctx context.Context, in *OffConnectReq, opts ...grpc.CallOption) (*NullResp, error) {
	client := connect.NewConnectClient(m.cli.Conn())
	return client.OffConnect(ctx, in, opts...)
}

func (m *defaultConnect) GetUserConnectList(ctx context.Context, in *GetUserConnectListReq, opts ...grpc.CallOption) (*UserConnectListResp, error) {
	client := connect.NewConnectClient(m.cli.Conn())
	return client.GetUserConnectList(ctx, in, opts...)
}

func (m *defaultConnect) SendOneMsg(ctx context.Context, in *SendOneMsgReq, opts ...grpc.CallOption) (*NullResp, error) {
	client := connect.NewConnectClient(m.cli.Conn())
	return client.SendOneMsg(ctx, in, opts...)
}

func (m *defaultConnect) SendManyMsg(ctx context.Context, in *SendManyMsgReq, opts ...grpc.CallOption) (*NullResp, error) {
	client := connect.NewConnectClient(m.cli.Conn())
	return client.SendManyMsg(ctx, in, opts...)
}

func (m *defaultConnect) GetServerInfo(ctx context.Context, in *ServerInfoReq, opts ...grpc.CallOption) (*ServerInfoResp, error) {
	client := connect.NewConnectClient(m.cli.Conn())
	return client.GetServerInfo(ctx, in, opts...)
}

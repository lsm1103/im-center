// Code generated by goctl. DO NOT EDIT!
// Source: conn.proto

package server

import (
	"context"

	"im-center/service/connect/rpc/connect"
	"im-center/service/connect/rpc/internal/logic"
	"im-center/service/connect/rpc/internal/svc"
)

type ConnectServer struct {
	svcCtx *svc.ServiceContext
	connect.UnimplementedConnectServer
}

func NewConnectServer(svcCtx *svc.ServiceContext) *ConnectServer {
	return &ConnectServer{
		svcCtx: svcCtx,
	}
}

//   rpc getConnectList(GetConnectListReq) returns(NullResp); // 获取连接列表
func (s *ConnectServer) GetConnectInfo(ctx context.Context, in *connect.GetConnectInfoReq) (*connect.ConnectInfo, error) {
	l := logic.NewGetConnectInfoLogic(ctx, s.svcCtx)
	return l.GetConnectInfo(in)
}

func (s *ConnectServer) OffConnect(ctx context.Context, in *connect.OffConnectReq) (*connect.NullResp, error) {
	l := logic.NewOffConnectLogic(ctx, s.svcCtx)
	return l.OffConnect(in)
}

func (s *ConnectServer) GetUserConnectList(ctx context.Context, in *connect.GetUserConnectListReq) (*connect.UserConnectListResp, error) {
	l := logic.NewGetUserConnectListLogic(ctx, s.svcCtx)
	return l.GetUserConnectList(in)
}

func (s *ConnectServer) SendOneMsg(ctx context.Context, in *connect.SendOneMsgReq) (*connect.NullResp, error) {
	l := logic.NewSendOneMsgLogic(ctx, s.svcCtx)
	return l.SendOneMsg(in)
}

func (s *ConnectServer) SendManyMsg(ctx context.Context, in *connect.SendManyMsgReq) (*connect.NullResp, error) {
	l := logic.NewSendManyMsgLogic(ctx, s.svcCtx)
	return l.SendManyMsg(in)
}

func (s *ConnectServer) GetServerInfo(ctx context.Context, in *connect.ServerInfoReq) (*connect.ServerInfoResp, error) {
	l := logic.NewGetServerInfoLogic(ctx, s.svcCtx)
	return l.GetServerInfo(in)
}

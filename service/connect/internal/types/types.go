// Code generated by goctl. DO NOT EDIT.
package types

import (
	"github.com/alberliu/gn"
	"github.com/gorilla/websocket"
)

type (
	GetOnlineUserListReq struct {
		Offset uint64 `json:"offset"` //偏移量
		Limit  uint64 `json:"limit"`  //限制条数
	}
	OnlineUserItem struct {
		UserId        string   `json:"user_id"`        //用户id
		Avatar        string   `json:"avatar"`         //头像
		NickName      string   `json:"nick_name"`      //昵称
		Gender        string   `json:"gender"`         //性别
		OnlineDevices []string `json:"online_devices"` //在线设备
		OnlineTime    string   `json:"online_time"`    //最早上线时间
	}
	OnlineUserListResp struct {
		OnlineUserList []OnlineUserItem `json:"online_user_list"` //在线用户列表
	}
)

type (
	NullResp      struct{}
	GetsQueryItem struct {
		Key        string `json:"key"`                                   // key
		Val        string `json:"val"`                                   // val int/str('xxx')/list('xx,xx,xx')
		Handle     string `json:"handle"`                                // 操作方法 =/>/</like
		NextHandle string `json:"nextHandle,options=or|and,default=and"` // 与下一个条件的操作方法 or/and
	}
	GetsReq struct {
		Query    []*GetsQueryItem `json:"query"`                              //查询
		OrderBy  string           `json:"orderBy,default=id"`                 //分组
		Sort     string           `json:"sort,options=desc|asc,default=desc"` //排序 desc/asc
		Current  int64            `json:"current,default=1"`                  //当前页
		PageSize int64            `json:"pageSize,default=10"`                //页面大小
	}
	GetConnectInfoReq struct {
		UserId   string `json:"user_id"`   //用户id
		DeviceId string `json:"device_id"` //设备id
	}
	ConnectInfoResp struct {
		UserId         string `json:"user_id"`         //用户id
		DeviceId       string `json:"device_id"`       //设备id
		ServerIp       string `json:"server_ip"`       //服务器ip
		ConnectIp      string `json:"connect_ip"`      //连接ip
		RegisterTime   uint64 `json:"register_time"`   //上线时间
		HeartbeatTime  uint64 `json:"heartbeat_time"`  //上次心跳时间
		UnRegisterTime uint64 `json:"unRegister_time"` //上次下线时间
		DeviceInfo     string `json:"device_info"`     //设备信息
	}
	OffConnectReq struct {
		UserId   string `json:"user_id"`   //用户id
		DeviceId string `json:"device_id"` //设备id
	}
	GetConnectListReq struct {
		Offset uint64 `json:"offset"` //偏移量
		Limit  uint64 `json:"limit"`  //限制条数
	}
	ConnectItem struct {
		UserId         string `json:"user_id"`         //用户id
		DeviceId       string `json:"device_id"`       //设备id
		ServerIp       string `json:"server_ip"`       //服务器ip
		ConnectIp      string `json:"connect_ip"`      //连接ip
		RegisterTime   uint64 `json:"register_time"`   //上线时间
		HeartbeatTime  uint64 `json:"heartbeat_time"`  //上次心跳时间
		UnRegisterTime uint64 `json:"unRegister_time"` //上次下线时间
		DeviceInfo     string `json:"device_info"`     //设备信息
	}
	ConnectListResp struct {
		ConnectList []ConnectItem `json:"online_user_list"` //连接列表
	}



	GetUserConnectListReq struct {
		Offset uint64 `json:"offset"` //偏移量
		Limit  uint64 `json:"limit"`  //限制条数
		UserId string `json:"user_id"` //用户id
	}
	UserConnectListResp struct {
		UserConnectList []ConnectItem `json:"user_connect_list"` //在线用户列表
	}


	GetServerInfoReq struct {
		ServerId string `json:"server_id, optional"` //服务器id, *:全部服务器
	}
	BusinessInfo struct {
		ConnectLen        int64 `json:"connect_len"`        //连接数
		UserLen           int64 `json:"user_len"`           //登录用户数
		PendRegisterLen   int64 `json:"pendRegister_len"`   //未处理连接事件数
		PendUnregisterLen int64 `json:"pendUnregister_len"` //未处理退出登录事件数
	}
	SysInfo struct {
		NumCpu          string `json:"num_Cpu"`           // Cpu数量
		NumCpuUsage     string `json:"num_Cpu_Usage"`     // Cpu使用率
		NumRam          string `json:"num_Ram"`           // 内存大小
		NumRamUsage     string `json:"num_Ram_Usage"`     // 内存使用率
		NumDisk         string `json:"num_Disk"`          // 磁盘大小
		NumDiskUsage    string `json:"num_Disk_Usage"`    // 磁盘使用率
		NumNetwork      string `json:"num_Network"`       // 网络流量
		NumNetworkUsage string `json:"num_Network_Usage"` // 网络流量使用率
	}
	ServerInfo struct {
		NumGoroutine     string `json:"num_goroutine"`     // goroutine数量
		AllocMemory      string `json:"alloc_memory"`      // 分配内存
		TotalAllocMemory string `json:"totalAlloc_memory"` // 分配内存总量
		SysMemory        string `json:"sys_memory"`        // 系统内存
		NumGC            string `json:"num_GC"`            // gc数量
	}
	ServerItem struct {
		ServerId     string       `json:"server_id"`     //服务器id
		ServerInfo   ServerInfo   `json:"server_info"`   //服务器信息
		BusinessInfo BusinessInfo `json:"business_info"` //业务信息
		SysInfo      SysInfo      `json:"sys_info"`      //系统信息
	}
	ServerInfoResp struct {
		Server []ServerItem `json:"server"` //服务器列表
	}
)


type (
	WsConnect struct {
		Socket        *websocket.Conn // 连接
		Addr          string          // 客户端地址
		UserId        string          // 用户Id
		DeviceId      string          // 登录的平台Id app/web/ios
		CurrentTime  uint64           // 当前时间
	}
	TcpConnect struct {
		Socket        *gn.Conn // 连接
		Addr          string          // 客户端地址
		UserId        string          // 用户Id
		DeviceId      string          // 登录的平台Id app/web/ios
		CurrentTime  uint64           // 当前时间
	}

	DistributedEvent struct {
		EventType string `json:"event_type"` //事件类型
		ConnectData *ConnectData `json:"connect_data"` // 连接数据
	}

	ConnectData struct {
		UserId         string `json:"user_id"`          // 用户Id
		DeviceId       string `json:"device_id"`        // 登录的平台Id app/web/ios
		Addr           string `json:"addr"`             // 客户端地址
		ServerIp       string `json:"server_ip"`        // 服务器ip
		RegisterTime   uint64 `json:"register_time"`    // 用户上次上线时间
		HeartbeatTime  uint64 `json:"heartbeat_time"`   // 用户上次心跳时间
		SetCacheTime   uint64 `json:"set_cache_time"`   // 用户上次设置缓存时间
	}

	Node struct {
		NodeId     string      `json:"server_id"`
		ServerInfo   interface{} `json:"server_info"`
		SysInfo      interface{} `json:"sys_info"`
	}
	ServerInfoItem struct {
		ServerId     string      `json:"server_id"`
		ServerInfo   interface{} `json:"server_info"`
		BusinessInfo interface{} `json:"business_info,omitempty"`
		SysInfo      interface{} `json:"sys_info"`
	}
	// 用户连接
	ConnectInfo struct {
		UserId         string `json:"user_id"`          // 用户Id
		DeviceId       string `json:"device_id"`        // 登录的平台Id app/web/ios
		Addr           string `json:"addr"`             // 客户端地址
		ServerIp       string `json:"server_ip"`        // 服务器ip
		RegisterTime   uint64 `json:"register_time"`    // 用户上次上线时间
		HeartbeatTime  uint64 `json:"heartbeat_time"`   // 用户上次心跳时间
		UnRegisterTime uint64 `json:"un_register_time"` // 用户上次下线时间
		DeviceInfo     string `json:"device_info"`      // 用户设备信息
	}

	// 连接唯一标识
	ConnectUid struct {
		UserId   string `json:"user_id"`   //用户id
		DeviceId string `json:"device_id"` //设备id
	}

	Request struct {
		Seq  string      `json:"seq"`            // 消息的唯一Id
		Cmd  string      `json:"cmd"`            // 请求命令字
		Data interface{} `json:"data,omitempty"` // 数据 json
	}
	MsgBody struct {
		Seq      string    `json:"seq"`      // 消息的Id
		Cmd      string    `json:"cmd"`      // 消息的cmd 动作
		Response *Response `json:"response"` // 消息体
	}
	Response struct {
		Code    uint32      `json:"code"`
		Msg 	string      `json:"msg"`
		Data    interface{} `json:"data"` // 数据 json
	}

	SyncSingleMsgReq struct {
		UserId  string `json:"user_id"`					// 用户id
		DeviceId	string `json:"device_id"`	// 设备id
		SingleSeq string `json:"single_seq"`	// 单聊消息的唯一Id
		SingleOperationType string `json:"operation_type"`	// 操作类型
	}
	SyncGroupMsgReq struct {
		UserId  string `json:"user_id"`					// 用户id
		DeviceId	string `json:"device_id"`	// 设备id
		GroupSeq []struct{
			GroupId string `json:"group_id"`	// 群组id
			Seq string `json:"group_seq"`	// 群组消息的唯一Id
			OperationType string `json:"operation_type"`	// 操作类型,部分/全部未同步消息
		} `json:"group_seq"`		// 群聊消息的唯一Id
	}
)

// 消息相关
type (
	// 通过长链接发送消息,消息入参模型
	ConnectSendMsg struct {
		Seq      string    `json:"seq"`      // 消息的序列号
		Cmd      string    `json:"cmd"`      // 消息的cmd 动作, heartbeat
		Data	 map[string]string    `json:"data,omitempty"` 	 // 数据
	}
	// 消息出参模型
	ConnectSendResp struct {
		Seq      string    `json:"seq"`      // 消息的序列号
		Cmd      string    `json:"cmd"`      // 消息的cmd 动作, heartbeat
		Code     uint32    `json:"code"`     // 消息的状态码
		Data	 string    `json:"data"` 	 // 数据
	}

	At struct {											// 需要@的用户id列表
		IsAtAll   bool     `json:"isAtAll,default=false"`	// 是否@所有人
		AtUserIds []string `json:"atUserIds,optional"`				// 用户id列表
		//AtMobiles []string `json:"atMobiles"`				// 手机号列表
	}
	msgContent interface{}
	// 单聊发消息
	SendOneMsgReq struct {
		SenderType       string `json:"sender_type"`        // 发送者类型：1发消息，2打招呼，3转发
		SenderId         string `json:"sender_id"`          // 发送者id
		SenderDeviceId   string `json:"sender_device_id"`   // 发送设备id
		ReceiverId       string `json:"receiver_id"`        // 接收者id
		ReceiverDeviceId string `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		ParentId         string `json:"parent_id"`          // 父级id，引用功能
		SendTime         string `json:"send_time"`          // 消息发送时间
		MsgType          string `json:"msg_type"`           // 消息类型
		MsgContent       interface{} `json:"msg_content"`        // 消息内容
	}
	// 群发消息
	SendManyMsgReq struct {
		SenderType       string   `json:"sender_type"`        // 发送者类型：1发消息，2打招呼，3转发
		SenderId         string   `json:"sender_id"`          // 发送者id
		SenderDeviceId   string   `json:"sender_device_id"`   // 发送设备id
		ReceiverId       []string `json:"receiver_id"`        // 接收者id
		ReceiverDeviceId string   `json:"receiver_device_id"` // 接收设备id：多个设备id"，"隔开，*表示全部设备
		ParentId         string   `json:"parent_id"`          // 父级id，引用功能
		SendTime         string   `json:"send_time"`          // 消息发送时间
		At               At       `json:"at,optional"`        // 需要@的用户id列表，多个用户用@隔开
		MsgType          string   `json:"msg_type"`           // 消息类型
		MsgContent       interface{}   `json:"msg_content"`        // 消息内容
	}
	Data struct{
		SenderType string `json:"sender_type"`				// 发送者类型：1发消息，2打招呼，3转发
		SenderId  string `json:"sender_id"`					// 发送者id
		SenderDeviceId	string `json:"sender_device_id"`	// 发送者设备id
		ParentId string `json:"parent_id,omitempty"`		// 父级id, 引用功能
		SendTime string `json:"send_time"`					// 发送时间
		At At `json:"at,omitempty"`
		MsgType          string   `json:"msg_type"`           // 消息类型
		MsgContent interface{} `json:"msg_content"`				// 消息内容
	} 	// 消息体
	// 消息结构体
	Msg struct {
		Seq      string    `json:"seq"`      // 消息的序列号
		Cmd      string    `json:"cmd"`      // 消息的cmd 动作
		Code     uint32    `json:"code,omitempty"`     // 消息的状态码
		Data Data `json:"data"` // 消息体
	}

	// 文本
	Text struct {
		Content string `json:"content"`			// 文本内容
	}
	// 图片
	Img struct {
		Url string `json:"url,omitempty"`			// 图片地址
	}
	// 音频
	Audio struct {
		Url 	  string `json:"url"`			// 音频地址
		Size 	  int64 `json:"size,omitempty"`			//文件大小
		Duration  int64 `json:"duration,omitempty"`		//时长
	}
	// 视频
	Video struct {
		Url 	  string `json:"url"`			// 视频地址
		PicUrl    string `json:"picUrl,omitempty"`		//图片URL
		Size 	  int64 `json:"size,omitempty"`			//文件大小
		Duration  int64 `json:"duration,omitempty"`		//时长
	}
	// 链接类型
	Link    struct {
		Title      string `json:"title"`		// 标题
		Text       string `json:"text,omitempty"`			//消息内容。如果太长只会部分展示
		MessageUrl string `json:"messageUrl"`	// 点击消息跳转的URL
		PicUrl     string `json:"picUrl,omitempty"`		//图片URL
	}
	// Markdown类型
	Markdown struct {
		Title string `json:"title"`	// 首屏会话透出的展示内容。
		Text  string `json:"text"`	// markdown格式的文本
	}
	// 整体跳转ActionCard类型
	ActionCard struct {
		Title          string `json:"title"`
		Text           string `json:"text,omitempty"`			// markdown格式的文本
		BtnOrientation string `json:"btnOrientation"` //0：按钮竖直排列,1：按钮横向排列
		//SingleTitle    string `json:"singleTitle"`	//单个按钮的标题
		//SingleURL      string `json:"singleURL"`	//点击消息跳转的URL，打开方式如下：移动端、PC端
		Btns           []struct {					//按钮数组
			Title     string `json:"title"`			//按钮标题
			ActionURL string `json:"actionURL"`		//点击消息跳转的URL，打开方式如下：移动端、PC端
		} `json:"btns"`
	}
	// FeedCard类型, 类似微信公众号文章
	FeedCard struct {
		Links []struct {
			Title      string `json:"title"`		//单条信息文本
			MessageURL string `json:"messageURL"`	//点击单条信息到跳转链接
			PicURL     string `json:"picURL,omitempty"`		//单条信息图片
		} `json:"links"`
	}
)